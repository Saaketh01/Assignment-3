<section id="Projects">
        <div class="container">
            <h1>Projects</h1>
            <div class="project">
                <h2>Project 1: Python Jumbled Words</h2>
                <p>
                Project 1: Python Jumbled Words

In this Python project, I embarked on the creation of an engaging and fun game for two players - the Python Jumbled Words game. The primary objective of this project was to enhance my programming skills while also providing an interactive and enjoyable experience for players. The game revolves around unscrambling jumbled words and scoring points for correct guesses.

The project's core features included a random word generator, a mechanism to jumble the words, user input for guessing, scoring, and a simple graphical user interface (GUI) for a better user experience. Let me walk you through the project's components in detail.

<li><b>Word Jumbling:</b>
The heart of the game lies in taking a randomly selected word and shuffling its letters to create a jumbled word. This required creating a function to generate random words from a predefined list or database and then rearranging the letters to create jumbled versions.</li>

<li><b>User Interaction:</b>
For the game to be interactive, I designed a simple text-based interface where two players could take turns guessing the jumbled words. Each player was prompted to input their guess, which was then checked for correctness. A correct guess would earn them a point, which was displayed on the screen.</li>
<li><b> Scoring System:</b>
The scoring mechanism involved maintaining a tally of points for each player. A player received one point for each correct guess, and their scores were updated and displayed after each turn. The game continued until both players had their turn, or a predetermined number of rounds were completed.</li>               
                </p>
            </div>
            <br>
            <div class="project">
                <h2>Project 2: Python Ciphers</h2>
                <p>
                The Python Ciphers project was a more advanced venture, undertaken as part of an Object-Oriented Programming (OOP) course. This project aimed to deepen my understanding of Python, OOP concepts, and cryptography. The project encompassed various ciphers, including RSA, Caesar Cipher, and Playfair Cipher, and was organized into distinct classes and methods for modularity and code reusability.

<li><b>RSA Encryption and Decryption:</b>
The RSA (Rivest-Shamir-Adleman) encryption and decryption processes were implemented using the modular exponentiation method. I created classes for key generation, encryption, and decryption, enabling secure communication between two parties.</li>

<li><b>Caesar Cipher:</b>
The Caesar Cipher, a basic substitution cipher, was implemented with customizable shift values. I designed a class for both encryption and decryption, allowing users to encode and decode messages with ease.</li>

<li><b>Playfair Cipher:</b>
The Playfair Cipher, a digraph substitution cipher, was realized with a focus on handling duplicate letters and special cases. A class was created for generating the key matrix and another for encryption and decryption.</li>
                
               </p>
            </div>
        </div>
    </section>